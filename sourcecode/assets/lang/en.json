{
  "home": "Home",
  "genetic-algorithms": "Genetic Algorithms",
  "behind-the-code": "Behind the Code",
  "leaderboard": "Leaderboard",
  "title": "Project group 4: Tetris AI",
  "upcoming-shape": "Next",
  "holding": "Hold",
  "chromosomes": "Chromosomes",
  "rotate": "Rotate",
  "arrow-up": "Arrow up",
  "drop-down": "Drop down",
  "spacebar": "Spacebar",
  "hold": "Hold",
  "shift": "Shift",
  "activate-ai": "Activate AI",
  "increase-speed": "Increase speed",
  "decrease-speed": "Decrease speed",
  "play": "Play",
  "pause": "Pause",
  "reset": "Reset",
  "bestAI": "Best gene",
  "on": "On",
  "off": "Off",
  "ga-title": "Genetic Algorithms Explained",
  "ga-intro": "Genetic algorithms (GAs for short) are algorithms designed to solve optimization problems. They are based on the theory of evolution and natural selection, in which generations of a species adapt and develop to fit their circumstances as much as possible. GAs find solutions with processes inspired by natural selection such as selection, crossover and mutation. The more generations a GA has undergone, the more likely that generation has the best possible solution to the problem it was given.",
  "ga-gen-title": "What's the general process?",
  "ga-gen-content": "GAs are heavily inspired by natural processes, so the terms are also based off of it. A GA starts with a population of a chosen amount of individuals, each having a set of randomly generated parameters, the first generation (Initialisation). After each individual has been evaluated on their parameters and received a fitness-score (Fitness), breeding begins. The breeding process can vary from application to application, but in general the best fitting individuals (mostly the top 50% of the population) are chosen to create children with each other (Selection). During the creation of a child, each parameter gets randomly selected from the parents (crossover). After this process, each parameter has a chance to be slightly mutated, so that random variation can bring change to the evolution of the GA (mutation). The breeding process is repeated until there is a new generation as big as the original one, and this process then keeps repeating itself. The more generations have passed, the more optimised the current generation and thus the solution is.",
  "ga-app-title": "Where and why is it used?",
  "ga-app-content": "GAs are used to optimise a process or to find the best possible solution to a problem. It has many uses and applications in a wide variety of fields (if not every field), such as medicine and pharmaceutics, engineering, robotics and finance to name a few. In engineering a new type of wing, for example, the ratio of lift to drag can be optimised by using a GA to predict the optimal parameters of the design (material used, measurements, etc.).",
  "btc-intro-title": "How did the project come to fruition?",
  "btc-intro-content": "The team members divided each part of the project amongst themselves; Matisse created tetris, Josse coded the data gathering, Nathan wrote the genetic algorithm and Akash and Tomas handled the website and the UI. They helped each other when needing assistance of course, so that each team member had some interaction with every part of the project.",
  "btc-ga-title": "The Genetic Algorithm",
  "btc-ga-content": "The population in this application of genetic algorithms is made of a series of games and genes are the weights of the parameters that the AI uses to calculate which move is the best. The fitness is determined in priority by the score of the game and then the amount of tetrominoes placed in the game.\n\nOne of the problems observed during the project was that the AI would stop evolving at some point. That point is called the convergence point, which happens when all the chromosomes become the same due to a lack of variance, preventing any form of evolution. This problem was solved by adding more variance. This can be done by increasing the mutation rate, the crossover rate, the amount of chromosomes and/or the amount of possible parents. However, it needs to be done wisely, because if there is too much variance the AI is going to stagnate or even become less performant in the long run.",
  "btc-tet-title": "Tetris",
  "btc-tet-content": "For making the Tetris game, the team decided to do it step for step. They broke down the game mechanics and made a method for each step. If you look into the code, you can see that all those methods come together in the MoveDown method. For the game environment, a 2D array full of zeros was used. On that grid all the different tetrominoes are represented with a unique number, which made it easy to give each one a different color in the print function. For more gameplay, a feature that makes it possible to hold a shape was added, so a player can use it later. After that a method EndUp was added which shows the player where the current block that you are using will end up in the grid.",
  "btc-dg-title": "Data Gathering",
  "btc-dg-content": "For the data gathering, the team started with doing a lot of research on data gathering and scraping. They decided to gather data from a tetris leaderboard, which eventually lead to coding a datascraper in Python. After some issues with permission for scraping, they managed to succesfully code a datascraper that would get data from an online tetris leaderboard and convert it to a json file.\n\nHowever, Matisse found a website called tetr.io that had an API where people could fetch stats about the best tetris players on their website. This made them decide to switch up the system and chose to fetch from this API using javascript. Now the website uses tetr.io for its leaderboard data.",
  "btc-web-title": "The Website",
  "btc-web-content": "The main goal was to clearly present the project and each of its components in an intuitive way. Bootstrap was used for easily constructing a proper layout, but this also brought along its own set of problems. The main feature that couldn't be added was a collapsable navigation bar. Lots of attempts and various methods were tried for this to work, from the built-in bootstrap feature to writing new code, but to no avail.\n\nFor the game, tetrominoes are rendered on a canvas. The movement of the blocks are handled by keyhandler functions written in JavaScript. To make the game immersive, various sound effects are added. Moreover, the inclusion of Dark and Light mode toggle makes it easier for night owls like us to enjoy the game without straining the eyes.",
  "lb-title": "Best Modern Tetris Players",
  "lb-rank": "Rank",
  "lb-player": "Player",
  "lb-rating": "TR-Rating",
  "lb-pps": "PPS",
  "lb-error": "Something went wrong while loading the global scores.",
  "lb-learnMore": "Toggle info",
  "lb-info": "This leaderboard is kept and updated on tetr.io. On this website users can play the Tetris stacker game competitively. Winning online ranked games against other players earns a player a higher TR Rating. Only 1% of the players have a TR Rating of over 24520.",
  "lb-gettingData": "Getting data..."
}
