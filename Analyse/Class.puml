@startuml klassediagram tetrisAI

title ==Class Diagram==

skinparam ClassAttributeIconSize 0
class Tetris{
    +shapes: Dictionary<vormletter:string, shape : int[][]>
    +grid: int[][]
    +currentShape: {x: int,y: int,shape,lost: bool,linescleared: int}
    +colors: string[]
    +upcomingShape: {x: int,y: int,shape, lost:bool, linescleared: int}
    +holdingShape: {x: int,y: int,shape, lost:bool, linescleared: int}
    +oldShape: {x: int,y: int,shape, lost:bool, linescleared: int}
    +bag: shape[]
    +bagIndex: int
    +score: int
    +data: {height: [], holes: int, blockades: int, linescleared:int,movesIndex:int}
    +ai_activated: boolean
    +fakeShape: shape
    +ground: boolean
    +holding: boolean   
    +speed: int
    +died: boolean
    +fakeDied: boolean
    +fakeGrid: int[][]
    +HoldShape():void
    +UseHoldShape(): void
    +movesTaken: int
    +MoveDown(): void
    +Drop(): void
    +TouchesRightWall(): boolean
    +EndUp(): void
    +MoveLeft():void
    +MoveRight(): void
    +RotateShape():void
    +GetData(): state: {height: [], holes: int, blockades: int, linescleared:int,movesIndex:int}
    +GetLinesCleared(): void
    +GetMovesIndex(): void
    +Holes(): void
    +Height(): void
    +Blockades(): void
    +Reset(): void
    +removeRow(y: int): void
    +ApplyShape(): void
    +RemoveShape(object: shape): void
    +NextShape(): void
    +GenerateBag(): void
    +Collides(object: Shape): boolean
    +Rotate(): void
    +Transpone(): void
    +UpdateScore(): void
    +CopyCurrentShape(): void
    +AIMoveDown(): void
    +AIDrop(): void
    +AIUpdateScore(): void
}
class AI{
    +populationNumber: int
    +populationSize:int
    +maxGeneration:int
    +chromosomes:int
    +genes:int[]
    +population:int[]
    +breeder:int[]
    +parentRate:int
    +breederSize:int
    +fitness:int
    +fittest:int[]
    +gene1:int[]
    +gne2:int[]
    +scores:int[]
    +moves:int[]
    +crossoverRate:int
    +mutationRate:int
    +mutationValue:int
    +geneInitValue:int
    +random:int
    +firstPopulation():void
    +getFittest():void
    +fillBreeder():void
    +makeParent():void
    +crossover():void
    +mutation():void
    +populate():void
    +reset():void
    +calcAggregateHeight(height:int[],gene:int[]):int
    +calcRelativeHeight(height:int[],gene:int[]):int
    +calcMaxHeight(height:int[],gene:int[]):int
    +calcClearLines(linesCleared:int[],gene:int[]):int
    +calcHoles(holes:int,gene:int[]):int
    +calcBlockades(blockades:int,gene:int[]):int
    +calcBumpiness(height:int,gene:int[]):int
    +calcRating(height:int[],linesCleared:int,holes:int,blockades:int,gene:int[]):int
}
class main{
    +KeyHandler(): void
    +arrow_keys_handler(event: e): void
    +Init():void
    +Print(canvas: canvas):void
    +UpdateSpeed(): void
    +GetToucheCoordinates(event: Event): void
    +mobileControl(event: Event): void
    +TouchStart(event: Event): void
    +TouchEnd(event: Event):void
    +onlongTouch(): void
    +startGame():void
    +resetGame(): void
    +pausegame(): void
    +toggleBestAI(): void
    +BestAI(): void
    +move(tetris: Tetris): void
    +auto(): void
    +algorithm(): void
    +GetBestMoves(): void
    +getAllMoves(): void
    +makeMoves(): void
    +waitUntil(): void
    +DrawGrid(canvas: Canvas): void
    +refreshChart(): void
    +handleRandomDataset(): void
    
}
main ..> Tetris: gebruikt
AI .> Tetris: gebruikt
@enduml