@startuml klassediagram tetrisAI

title ==Class Diagram==

skinparam ClassAttributeIconSize 0
class Tetris{
    +shapes: Dictionary<letter:string, shape: int[][]>
    +grid: int[][]
    +currentShape: {x: int, y: int, shape: int[][], lost: bool, linesCleared: int}
    +colors: string[]
    +upcomingShape: {x: int, y: int, shape: int[][], lost: bool, linesCleared: int}
    +holdingShape: {x: int, y: int, shape: int[][], lost: bool, linesCleared: int}
    +oldShape: {x: int, y: int, shape: int[][], lost: bool, linesCleared: int}
    +bag: shape[]
    +bagIndex: int
    +score: int
    +data: {height: int[], holes: int, blockades: int, linesCleared: int, movesIndex: int}
    +aiActivated: boolean
    +fakeShape: shape
    +ground: boolean
    +holding: boolean   
    +speed: int
    +died: boolean
    +fakeDied: boolean
    +fakeGrid: int[][]
    +holdShape():void
    +useHoldShape(): void
    +movesTaken: int
    +moveDown(): void
    +drop(): void
    +touchesRightWall(): boolean
    +endUp(): void
    +moveLeft():void
    +moveRight(): void
    +rotateShape():void
    +getData():void
    +getlinesCleared(): void
    +getMovesIndex(): void
    +holes(): void
    +height(): void
    +blockades(): void
    +reset(): void
    +removeRow(y:int):void
    +applyShape(): void
    +removeShape(shape:int[][]):void
    +nextShape(): void
    +generateBag(): void
    +collides(shape:int[][]):boolean
    +rotate(): void
    +transpone(): void
    +updateScore(): void
    +copyCurrentShape(): void
    +AIMoveDown(): void
    +AIDrop(): void
    +AIUpdateScore(): void
}
class AI{
    +populationNumber: int
    +populationSize:int
    +maxGeneration:int
    +chromosomes:int
    +genes:int[]
    +population:int[]
    +breeder:int[]
    +parentRate:int
    +breederSize:int
    +fitness:int
    +fittest:int[]
    +gene1:int[]
    +gene2:int[]
    +scores:int[]
    +moves:int[]
    +crossoverRate:int
    +mutationRate:int
    +mutationValue:int
    +geneInitValue:int
    +random:int
    +firstPopulation():void
    +getFittest():void
    +fillBreeder():void
    +makeParent():void
    +crossover():void
    +mutation():void
    +populate():void
    +reset():void
    +calcAggregateHeight(height:int[], gene:int[]):int
    +calcRelativeHeight(height:int[], gene:int[]):int
    +calcMaxHeight(height:int[], gene:int[]):int
    +calcClearLines(linesCleared:int[], gene:int[]):int
    +calcHoles(holes:int, gene:int[]):int
    +calcBlockades(blockades:int, gene:int[]):int
    +calcBumpiness(height:int, gene:int[]):int
    +calcRating(height:int[], linesCleared:int, holes:int, blockades:int, gene:int[]):int
}
class main{
    +keyHandler(): void
    +arrowKeysHandler(event: Event): void
    +print(canvas: canvas):void
    +updateSpeed(): void
    +getToucheCoordinates(event: Event): void
    +mobileControl(event: Event): void
    +touchStart(event: Event): void
    +touchEnd(event: Event):void
    +onLongTouch(): void
    +startGame():void
    +resetGame(): void
    +pausegame(): void
    +toggleBestAI(): void
    +bestAI(): void
    +move(tetris: Tetris): void
    +auto(): void
    +algorithm(): void
    +getBestMoves(): void
    +getAllMoves(): void
    +makeMoves(): void
    +waitUntil(): void
    +drawGrid(canvas: Canvas): void
    +refreshChart(): void
    +handleRandomDataset(): void
    +init():void
}

class Sound{
    +sounds: Array<HTMLAudioElement>
    +parent: HTMLAudioElement
    +muted: bool
    +create(): HTMLAudioElement
    +soundSettings(): void
    +muteToggle(): void
    +pause(): void
    +play(): void
}

main .down.> Tetris: uses
main .right.> Sound: uses
main .left.> AI: uses
@enduml